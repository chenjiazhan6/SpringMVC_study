1. 入门程序

 配置前端控制器,用于拦截请求,在web.xml文件中配置
 配置controller,创建一个类,加上@Controller注解,用于处理对应的请求,在方法上加上注解,用于处理特定请求路径的请求
 此时需要开启注解扫描,在springmvc.xml配置文件中开启注解扫描
 此时这个springmvc.xml还不能被加载,此时需要在web.xml文件中配置加载该文件

 当请求返回字符串时,此时需要配置一个视图解析器,用于返回特定的页面,在springmvc.xml中进行配置即可


 配置一个前端控制器
 配置一个视图解析器
 配置一个控制器(一个类)

SpringMVC存在的控制器

前端控制器
处理器映射器
处理器适配器
Handler
视图解析器

@RequestMapping注解的使用:用于处理请求路径与请求方法之间的映射,可以用在类上,也可以用在方法上
可以分模块开发

具有属性:
     @AliasFor("path")
    String[] value() default {};

    @AliasFor("value")
    String[] path() default {};

    RequestMethod[] method() default {};

    String[] params() default {};

    String[] headers() default {};

    其中value和path是相同的,这个是用于请求路径与方法之间的映射

    method：设置请求方法,只处理特定请求方法的请求
    params: 要求一定要有传入的参数,如果key和value都有的话,就都要保持一致
    headers:设置了的话,请求中一定要有设置的请求头



二. 获取请求参数

1. 当请求参数与处理方法中的参数名相同时,SpringMVC将会对方法进行自动赋值,使用反射进行赋值
2. 传入参数为javaBean对象,在对其进行封装时,将会通过传入参数的名字使用反射来调用javaBean的setter方法进行赋值,如果名字不同,将会导致赋值失败
    如果javaBean中存在一个引用类型,那么传入参数名称应该为javaBean中   引用名.属性名   ,能够调用反射来赋值

    传入中文参数时,会出现中文乱码,可以设置过滤器,CharacterEncodingFilter来对编码方式进行设置,在web.xml中对其进行配置
    1)完全匹配 /servlet1
    2）目录匹配 /* 或者 /aaa/* ----匹配资源最多的
    3）扩展名匹配 *.abc *.jsp

    pageEncoding="UTF-8"的作用是设置JSP编译成Servlet时使用的编码。 
    2、contentType="text/html;charset=UTF-8"的作用是指定对服务器响应进行重新编码的编码。 
    3、request.setCharacterEncoding("UTF-8")的作用是设置对客户端请求进行重新编码的编码。
    4、response.setCharacterEncoding("UTF-8")的作用是指定对服务器响应进行重新编码的编码。 
    response.setCharacterEncoding("UTF-8")的作用是指定对服务器响应进行重新编码的编码。
    同时，浏览器也是根据这个参数来对其接收到的数据进行重新编码（或者称为解码）。
    所以在无论你在JSP中设置response.setCharacterEncoding ("UTF-8")或者response.setCharacterEncoding("GBK")，
    浏览器均能正确显示中文（前提是你发送到浏览器的数据编码是正确的，比如正确设置了pageEncoding参数等）。

    过滤器的原理,在tomcat服务器之前设置一个过滤器,能够对其进行字符集的重新编码

3. 当javaBean对象中存在list集合和map集合时

    - list集合
    传入参数名为(属性名)list[0].名称
    - map集合
    传入参数为(属性名)map['key'].名称


4. 自定义类型转换器:传入参数其实都是字符类型,SpringMVC能够自动进行类型转换,但是有可能无法自动转换,此时可以使用自定义转换器

    可以编写一个转换失败的请求,然后使用自定义转换器,SpringMVC的类型转换器在哪里设置的

5. 如何获取Servlet原生的api,在要获得原生API的方法上加上对应的参数即可

常用注解

1. RequestParams:用于解决传入参数与处理方法的参数不同的情况

         @AliasFor("name")
        String value() default "";

        @AliasFor("value")
        String name() default "";

在方法处使用该属性表明将传入的哪个参数赋给方法参数

        boolean required() default true;

        声明传入的参数必须存在这个属性,不存在将会报错

2. @RequestBody  可以获得请求体,只适用于post方法,因为get方法没有请求体,得到的数据类型是一个key=value的类型的值

3. @PathVariable(name="id")可以获取路径中的占位符名称为id的值
    可以在路径上使用占位符

4.@RequestHeader可以获得请求头

   @AliasFor("name")
    String value() default "";

    @AliasFor("value")
    String name() default "";

    可以使用value或者name属性指明要使用哪个头部

5.@CookieValue获得cookie的值,可以使用value或者name来指明获取对应key的value
并且要求一定要有cookie

建立一个连接时,服务器会创建一个session,然后以cookie的形式返回一个值,用于唯一确定一个session
sessionid是一个会话的key，浏览器第一次访问服务器会在服务器端生成一个session，有一个sessionid和它对应。
tomcat生成的sessionid叫做jsessionid。


6. @ModelAttribute注解声明的方法将会在任何方法之前执行

   - 有返回值的情况,返回值将作为真正处理方法的参数
   - 没有返回值的情况,可以将值设置在map集合中,在真正的处理方法中使用@ModelAttribute()

       @AliasFor("name")
       String value() default "";

       @AliasFor("value")
       String name() default "";

       使用name和value属性声明map中key的值

7. @SessionAttributes注解的使用
